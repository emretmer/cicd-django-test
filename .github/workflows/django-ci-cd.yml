name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.4'

    - name: Install dependencies
      run: |
        python -m venv venv  # Virtual environment oluştur
        source venv/bin/activate  # Virtual environment'ı aktive et
        pip install --upgrade pip  # pip'i güncelle
        pip install django pytest pytest-django  # Django ve test bağımlılıklarını kur

    - name: Set DJANGO_SETTINGS_MODULE
      run: echo "DJANGO_SETTINGS_MODULE=blog.settings" >> $GITHUB_ENV  # Django settings modülünü ayarla

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$GITHUB_WORKSPACE/cicdgithub" >> $GITHUB_ENV  # PYTHONPATH'i cicdgithub dizinine ayarla

    - name: Update requirements.txt
      run: |
        source venv/bin/activate  # Virtual environment'ı aktive et
        pip freeze > requirements.txt  # Mevcut bağımlılıkları requirements.txt dosyasına yaz

    # Docker Build Adımları
    - name: Build Docker image
      run: |
        docker build -t mydjangoapp cicdgithub/blog/

    # Docker Compose Yükleme ve Çalıştırma
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Docker Compose sürümünü kontrol et

    - name: Run Docker container
      run: |
        cd cicdgithub/blog  # doğru dizine geç
        docker-compose up -d  # Docker Compose ile konteynerları çalıştır

    - name: Stop Docker container if it exists
      run: |
          if [ $(docker ps -q -f name=mydjangoapp-container) ]; then
            docker stop mydjangoapp-container  # Konteyner varsa durdur
            docker rm mydjangoapp-container  # Konteynerı sil
          else
            echo "No container named mydjangoapp-container running."  # Konteyner çalışmıyorsa mesaj yazdır
          fi     

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.4'

    - name: Install dependencies
      run: |
        python -m venv venv  # Virtual environment oluştur
        source venv/bin/activate  # Virtual environment'ı aktive et
        pip install --upgrade pip  # pip'i güncelle
        pip install django
        pip freeze > requirements.txt  # requirements.txt dosyasındaki bağımlılıkları kur

    - name: Run migrations
      run: |
          source venv/bin/activate  # Virtual environment'ı aktive et
          python cicdgithub/blog/manage.py migrate  # Veritabanı migrasyonlarını çalıştır

    - name: Collect static files
      run: |
          source venv/bin/activate  # Virtual environment'ı aktive et
          python cicdgithub/blog/manage.py collectstatic --noinput  # Statik dosyaları topla

    # Docker Deployment Adımları
    - name: Deploy with Docker
      run: |
        docker build -t mydjangoapp  cicdgithub/blog/  # Docker imajını oluştur
        docker run -d -p 8000:8000 --name mydjangoapp-container mydjangoapp  # Docker konteynerını çalıştır
        # Deploy işlemi sonrasında uygulamayı aktif et

    - name: Run tests inside Docker container
      run: |
        docker exec mydjangoapp-container bash -c "python manage.py test posts.tests.test_hello_world.HelloWorldTest"
  

    - name: Clean up Docker containers
      run: |
        docker stop mydjangoapp-container  # Konteynerı durdur
        docker rm mydjangoapp-container  # Konteynerı sil-
